# create dataset
python -m prodigy dataset invs "Invs person written names"

## make-gold (USE THIS)
python -m prodigy ner.make-gold invs de_core_news_sm person__written_name__250.txt --label NN -U

## batch-train

prodigy ner.batch-train [dataset] [spacy_model] [--output] [--factor] [--dropout] [--n-iter] [--batch-size] [--beam-width] [--eval-id] [--eval-split] [--unsegmented] [--no-missing] [--silent]
python -m prodigy ner.batch-train invs de_core_news_sm --output invs_nn -l NN -U

## second run
python -m prodigy ner.make-gold invs invs_nn person__written_name__250.txt --label NN -U (too much noise) ->
python -m prodigy ner.manual invs de_core_news_sm person__written_name__250.txt --label NN
python -m prodigy ner.batch-train invs de_core_news_sm --output invs_nn -l NN -es 0.2 -U

## added and annotated some corner cases

python -m prodigy ner.gold-to-spacy invs invs_vn.jsonl


## save anntoations

prodigy ner.gold-to-spacy [dataset] [output_file] [--spacy-model] [--biluo]
python -m prodigy ner.gold-to-spacy mrp mrp.jsonl


# make the same with VN

python -m prodigy dataset invs_vn "Invs person written names VN"
python -m prodigy ner.manual invs_vn de_core_news_sm person__written_name__250.txt --label VN 



# male/female/group text-classifaction

python -m prodigy dataset invs_gender "Invs Person gender classification, F, M, G(roup)"

python -m prodigy textcat.teach [dataset] [spacy_model] [source] [--api] [--loader] [--label] [--patterns] [--exclude]
python -m prodigy textcat.teach invs_gender de_core_news_sm person__written_name__250.txt --label F,M,G

having three groups is too cumbersome to annotate; therefore make a binary classifaction 

python -m prodigy dataset invs_gender_binary "Invs Person gender_binary classification, male"
python -m prodigy textcat.teach invs_gender_binary de_core_news_sm person__written_name__250.txt --label male

python -m prodigy textcat.batch-train [dataset] [input_model] [--output] [--label] [--factor] [--dropout] [--n-iter] [--batch-size] [--eval-id] [--eval-split] [--silent]
python -m prodigy textcat.batch-train invs_gender_binary de_core_news_sm --output invs_gender_binary --label male

extra work to get rid of false positivs:
python -m prodigy textcat.teach invs_gender_binary de_core_news_sm false_males.txt --label male


# annotate Jobs

use only main male persons, drop existing dataset: 

prodigy drop [dataset]
python -m prodigy drop invs_jobs

python -m prodigy dataset invs_jobs "Invs Person (male, main) Jobs JOB"

python -m prodigy ner.manual invs_jobs de_core_news_sm person__male_main.txt --label JOB 
python -m prodigy ner.gold-to-spacy invs_jobs invs_jobs.jsonl


## annotate Jobs II 

do the same again with related persons

python -m prodigy dataset invs_jobs_related "Invs Person (male, related) Jobs JOB"
python -m prodigy ner.manual invs_jobs_related de_core_news_sm person__male_related.txt --label JOB 
python -m prodigy ner.gold-to-spacy invs_jobs_related invs_jobs_related.jsonl

# annotate Places
 
this should work more or less in the same way as with jobs
python -m prodigy dataset invs_loc "Invs Person (main) LOC"
python -m prodigy ner.manual invs_loc de_core_news_sm person__main.txt --label LOC 
python -m prodigy ner.gold-to-spacy invs_loc invs_loc.jsonl

# annotate Familiy

python -m prodigy dataset invs_fam "Invs Person (related) FAM"
python -m prodigy ner.manual invs_fam de_core_news_sm person__related.txt --label FAM 
python -m prodigy ner.manual invs_fam de_core_news_sm person__related_extra.txt --label FAM 
python -m prodigy ner.gold-to-spacy invs_fam invs_fam.jsonl
